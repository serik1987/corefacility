(()=>{"use strict";class t{constructor(t){this.entityClass=t}createEntity(t){throw"createEntity was not implemented"}updateEntity(t,e=True){throw"updateEntity was not implemented"}deleteEntity(t,e=True){throw"deleteEntity was not implemented"}loadEntity(t){throw"loadEntity was not implemented"}*[Symbol.iterator](){throw"iteration over different entities was not implemented"}toString(){return"[EntityProvider]"}}class e extends t{constructor(t,e){super(e),this.pathSegment=t}createEntity(t){console.log("Creating entity"),console.log(t)}updateEntity(t,e=!0){console.log("Update entity"),console.log(t),console.log(e)}deleteEntity(t){console.log("Delete entity"),console.log(t)}loadEntity(t){console.log("Load entity"),console.log(t);let e=new this.entityClass;return e._entityFields={id:1,login:"sergei.kozhukhov"},e}*[Symbol.iterator](){for(let t=0;t<10;++t){let e=new this.entityClass;e._entityFields={id:t+1,login:"user"+t},yield e}}toString(){return`[${this.pathSegment.charAt(0).toUpperCase()}${this.pathSegment.slice(1)}Provider]`}}class i extends class{constructor(t){if(this._entityFields={id:null},null!=t)for(let e in t){if(!(e in this))throw`Non-existent property ${e} has been mentioned in the entityInfo argument`;this[e]=t[e]}this.constructor._entityProviders}static get _entityProviders(){throw"No entity providers defined"}create(){for(let t of this.constructor._entityProviders)t.createEntity(this)}static get(t){return this._entityProviders[0].loadEntity(t)}update(t=!0){for(let e of this.constructor._entityProviders)e.updateEntity(this,t)}delete(){for(let t of this.constructor._entityProviders)t.deleteEntity(this)}static*iterate(){for(let t of this._entityProviders[0])yield t}toString(){let t="";for(let e in this._entityFields)t+=`${e}: ${this._entityFields[e]}\n`;return t}}{static get _entityProviders(){return[new e("users",i)]}get id(){return this._entityFields.id}get login(){return this._entityFields.login}set login(t){this._entityFields.login=t}get name(){return this._entityFields.name}set name(t){this._entityFields.name=t}get surname(){return this._entityFields.surname}set surname(t){this._entityFields.surname=t}toString(){return super.toString()}}let n=new i({login:"sergei.kozhukhov",name:"Sergei",surname:"Kozhukhov"});console.log(n+""),n.create(),n.update(),n.update(!1),n.delete();let o=i.get("support");console.log(o+"");for(let t of i.iterate())console.log("----------------------------"),console.log(t+"")})();