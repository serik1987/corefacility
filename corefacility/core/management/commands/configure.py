import os
from pathlib import Path
import shutil
from django.core.management import BaseCommand
from django.core.management.utils import get_random_secret_key
from django.utils.module_loading import import_string
from corefacility.settings_launcher import SETTINGS_DIR, BASE_DIR


class Command(BaseCommand):
    """
    Defines a command that loads all configuration defaults
    """

    help = """
Provides preliminary configuration setup including:
    (1) creating settings folder with default settings
    (2) looking for all found applications and putting them to the 'applications.list' file
    """

    requires_system_checks = []

    DEFAULT_APPLICATION_LIST = [
        "core", "authorizations.cookie", "authorizations.google", "authorizations.mailru",
        "imaging", "roi",
    ]

    APPLICATIONS_LIST_FILE = BASE_DIR / "applications.list"
    APPLICATION_SETTINGS_FILE = BASE_DIR / "corefacility/corefacility/settings/application_settings.py"
    DEFAULT_SETTINGS_DIR = BASE_DIR / "corefacility/corefacility/settings/defaults"

    def add_arguments(self, parser):
        """
        Adds some options to the parser
        :param parser: the parser to which some options shall be added
        """
        parser.add_argument("--reset", action="store_true",
                            help="Resets all django settings to their defaults")

    def handle(self, *args, reset=False, **options):
        """
        Loads all configuration defaults
        :param args: useless
        :param reset: True if the handle shall clear all default options, False otherwise
        :param options: useless
        :return: nothing
        """
        application_list = self._load_application_list()
        django_apps, django_middleware = self._find_django_apps(application_list)
        self._make_application_settings(django_apps, django_middleware)
        if not os.path.isdir(SETTINGS_DIR):
            os.mkdir(SETTINGS_DIR)
        if reset:
            self._remove_old_files()
        self._copy_configuration_defaults()
        self._generate_secret_key()

    def _load_application_list(self):
        """
        If applications.list file exists, the function loads list of whole applications from the applications.list
        file.
        If the file doesn't exist, the function creates it automatically and assigns the DEFAULT_APPLICATION_LIST
        as values of the applications list
        :return:
        """
        if os.path.exists(self.APPLICATIONS_LIST_FILE):
            with open(self.APPLICATIONS_LIST_FILE, "r") as app_list_file:
                application_list = app_list_file.readlines()
                application_list = [app_name.replace("\n", "") for app_name in application_list]
        else:
            application_list = list(self.DEFAULT_APPLICATION_LIST)
            with open(self.APPLICATIONS_LIST_FILE, "w") as app_list_file:
                app_list_file.write("\n".join(application_list))
        return [app_module for app_module in application_list if app_module != "" and app_module is not None]

    def _find_django_apps(self, application_list):
        """
        Finds all django application and middlewares
        :param application_list: the information loaded from the applications.list file
        :return: a installed_apps, middleware applications where installed_apps are Django applications that is
            needed to be installed and middleware are all necessary middleware
        """
        installed_apps = list()
        middleware = list()
        for python_module in application_list:
            app_class = import_string("%s.App" % python_module)
            app = app_class()
            if hasattr(app, "INSTALLED_APPS"):
                installed_apps.extend(app.INSTALLED_APPS)
            if hasattr(app, "MIDDLEWARE"):
                middleware.extend(app.MIDDLEWARE)
            installed_apps.append(python_module)
        return installed_apps, middleware

    def _make_application_settings(self, installed_apps, middleware):
        """
        Creates the application_settings.py file from the installed_apps and the middleware file
        :param installed_apps:
        :param middleware:
        :return:
        """
        installed_app_list = "INSTALLED_APPS = [%s]\n" % ",".join(["'%s'" % app for app in installed_apps])
        middleware_list = "MIDDLEWARE = [%s]\n" % ",".join(["'%s'" % app for app in middleware])
        with open(self.APPLICATION_SETTINGS_FILE, "w") as app_settings_file:
            app_settings_file.write("# The file has been automatically generated by the corefacility project\n")
            app_settings_file.write("# do NOT edit it\n")
            app_settings_file.write(installed_app_list)
            app_settings_file.write(middleware_list)

    def _remove_old_files(self):
        for filename in os.listdir(SETTINGS_DIR):
            fullname = os.path.join(SETTINGS_DIR, filename)
            os.remove(fullname)
            self.stdout.write("The following configuration was removed: " + fullname)

    def _copy_configuration_defaults(self):
        for filename in os.listdir(self.DEFAULT_SETTINGS_DIR):
            fullname = str(self.DEFAULT_SETTINGS_DIR / filename)
            dst = os.path.join(SETTINGS_DIR, filename)
            if os.path.isfile(fullname) and fullname.endswith(".env") and not os.path.isfile(dst):
                shutil.copyfile(fullname, dst)
                self.stdout.write("Copying %s -> %s" % (fullname, dst))

    def _generate_secret_key(self):
        secret = get_random_secret_key()
        secret_property = "DJANGO_SECRET_KEY=%s" % secret
        secret_file = os.path.join(SETTINGS_DIR, "secret.env")
        with open(secret_file, "w") as f:
            f.write(secret_property)
        self.stdout.write("Generating the following file with secret key: " + secret_file)
